// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Xenko.Rendering.Data;
using SiliconStudio.Xenko.Rendering.Materials;

namespace SiliconStudio.Xenko.Rendering
{
    partial effect XenkoLighting1
    {
        using params LightingKeys;

        // -----------------------------------------------
        // Add light groups
        // -----------------------------------------------
        ShaderSourceCollection directLightGroups = LightingKeys.DirectLightGroups;
        if (directLightGroups != null)
        {
            foreach(ShaderSource directLightGroup in directLightGroups)
            {
                // Use parenthesis (...) to avoid lightGroup to be interpreted as a mixin named "lightGroup"
                mixin compose directLightGroups += (directLightGroup);
            }
        }

        // -----------------------------------------------
        // Add environment light groups
        // -----------------------------------------------
        ShaderSourceCollection environmentLights = LightingKeys.EnvironmentLights;
        if (environmentLights != null)
        {
            foreach(ShaderSource environmentLight in environmentLights)
            {
                // Use parenthesis (...) to avoid lightGroup to be interpreted as a mixin named "lightGroup"
                mixin compose environmentLights += (environmentLight);
            }
        }
    }

    /// <summary>
    /// Forward shading effect
    /// </summary>
    effect Shader1
    {
        using params MaterialKeys;

        // Derive from XenkoEffectBase
        mixin XenkoEffectBase;

        // -----------------------------------------------
        // Mix material and lighting shading for Pixel Shader
        // ------------------------------------------------
        ShaderSource extensionPixelStageSurfaceShaders = MaterialKeys.PixelStageSurfaceShaders;
        if (extensionPixelStageSurfaceShaders != null)
        {
            mixin MaterialSurfacePixelStageCompositor;
            mixin compose materialPixelStage = (extensionPixelStageSurfaceShaders);
            mixin compose streamInitializerPixelStage = MaterialKeys.PixelStageStreamInitializer;

            ShaderSource extensionPixelStageSurfaceFilter = MaterialKeys.PixelStageSurfaceFilter;
            if (extensionPixelStageSurfaceFilter != null)
            {
                mixin (extensionPixelStageSurfaceFilter);
            }

            mixin BShader;

            mixin child GBuffer;
        }

        // -----------------------------------------------
        // Add direct and environment light groups
        // -----------------------------------------------
        mixin XenkoLighting1;
        
        mixin child ShadowMapCaster;
        mixin child ShadowMapCasterParaboloid;
        mixin child ShadowMapCasterCubeMap;

       // mixin AShader;
    };
}
